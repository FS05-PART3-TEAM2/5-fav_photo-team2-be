generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  nickname  String
  password  String
  role      String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth              Auth?
}


model Auth {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}


model PhotoCard {
  id          String   @id @default(uuid())
  creatorId   String
  name        String
  genre       String
  grade       String
  price       Int
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}


model UserPhotoCard {
  id           String   @id @default(uuid())
  ownerId      String
  photocardId  String
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}


model SaleCard {
  id          String   @id @default(uuid())
  sellerId    String
  instanceId  String
  quantity    Int
  price       Int
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

model TransactionLog {
  id            String   @id @default(uuid())
  saleCardId    String
  buyerId       String
  sellerId      String
  photocardId   String
  quantity      Int
  totalPrice    Int
  createdAt     DateTime @default(now())

}

model ExchangeOffer {
  id             String   @id @default(uuid())
  saleCardId     String
  offererId      String
  offeredCardId  String
  quantity       Int
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

}


model Notification {
  id        String   @id @default(uuid())
  type      String
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?

}

model PointHistory {
  id           String   @id @default(uuid())
  user_id      String
  amount       Int
  resourceType String
  resourceId   String
  createdAt    DateTime @default(now())

}
model RandomBoxDraw {
  id           String   @id @default(uuid())
  userId       String
  earnedPoints Int
  createdAt    DateTime @default(now())

}
