generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(uuid())
  email     String   @unique
  nickname  String
  password  String
  role      String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  auth              Auth?
  newTransactions   TransactionLog[] @relation("newOwnerId")
  oldTransactions   TransactionLog[] @relation("oldOwnerId")  
  /// 쿼리 예시 
  /// const userWithTransactions = await prisma.user.findUnique({
  ///   where: { id: "유저Id" },
  ///   include: { oldTransactions: true },
  /// });
  userPhotoCards     UserPhotoCard[] 
  saleCards          SaleCard[]
}


model Auth {
  id           String   @id @default(uuid())
  userId       String   @unique
  refreshToken String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id])
}


model PhotoCard {
  id          String   @id @default(uuid())
  creatorId   String
  name        String
  genre       String
  grade       String
  price       Int
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userPhotoCards     UserPhotoCard[] 
  salePhotoCard      SaleCard[]
}


model UserPhotoCard {
  id           String   @id @default(uuid())
  ownerId      String
  photoCardId  String
  quantity     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  owner         User      @relation(fields: [ownerId], references: [id])
  photoCard     PhotoCard @relation(fields: [photoCardId], references: [id])

}


model SaleCard {
  id          String   @id @default(uuid())
  sellerId    String
  photoCardId String
  quantity    Int
  price       Int
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  seller       User          @relation(fields: [sellerId],  references: [id])
  photoCard    PhotoCard     @relation(fields: [photoCardId], references: [id])
}

model TransactionLog {
  id               String   @id @default(uuid())
  transactionType  String
  transactionId    String
  newOwnerId       String
  oldOwnerId       String
  quantity         Int
  totalPrice       Int
  createdAt        DateTime @default(now())

  newOwner         User @relation("newOwnerId", fields: [newOwnerId], references: [id])
  oldOwner         User @relation("oldOwnerId", fields: [oldOwnerId], references: [id])
}

model ExchangeOffer {
  id             String   @id @default(uuid())
  saleCardId     String
  offererId      String
  offeredCardId  String
  quantity       Int
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

}


model Notification {
  id        String   @id @default(uuid())
  type      String
  userId    String
  message   String
  createdAt DateTime @default(now())
  readAt    DateTime?

}

model PointHistory {
  id           String   @id @default(uuid())
  userId      String
  amount       Int
  resourceType String
  resourceId   String
  createdAt    DateTime @default(now())

}
model RandomBoxDraw {
  id           String   @id @default(uuid())
  userId       String
  earnedPoints Int
  createdAt    DateTime @default(now())

}
